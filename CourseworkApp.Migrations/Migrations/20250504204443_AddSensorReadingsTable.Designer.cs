// <auto-generated />
using System;
using CourseworkApp.Database.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CourseworkApp.Database.Migrations
{
    [DbContext(typeof(TestDbContext))]
    [Migration("20250504204443_AddSensorReadingsTable")]
    partial class AddSensorReadingsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseworkApp.Database.Models.FirmwareConfigurations", b =>
                {
                    b.Property<int>("FirmwareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FirmwareId"));

                    b.Property<DateTime>("EndofLifeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirmwareData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirmwareVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SensorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FirmwareId");

                    b.ToTable("FirmwareConfigurations");
                });

            modelBuilder.Entity("CourseworkApp.Database.Models.MainPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("test");
                });

            modelBuilder.Entity("CourseworkApp.Database.Models.SensorConfigHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryId"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConfigId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FirmwareId")
                        .HasColumnType("int");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("HistoryId");

                    b.HasIndex("ConfigId");

                    b.HasIndex("FirmwareId");

                    b.ToTable("SensorConfigHistory", null, t =>
                        {
                            t.HasCheckConstraint("CK_SensorConfigHistory_ConfigOrFirmware", "(ConfigId IS NULL AND FirmwareId IS NOT NULL) OR (ConfigId IS NOT NULL AND FirmwareId IS NULL)");
                        });
                });

            modelBuilder.Entity("CourseworkApp.Database.Models.SensorConfigurations", b =>
                {
                    b.Property<int>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConfigId"));

                    b.Property<string>("ConfigName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SensorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConfigId");

                    b.ToTable("SensorConfigurations");
                });

            modelBuilder.Entity("CourseworkApp.Database.Models.SensorReadings", b =>
                {
                    b.Property<long>("ReadingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ReadingId"));

                    b.Property<int>("ConfigId")
                        .HasColumnType("int");

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ReadingId");

                    b.HasIndex("ConfigId");

                    b.HasIndex("SensorId");

                    b.ToTable("SensorReadings");
                });

            modelBuilder.Entity("CourseworkApp.Database.Models.Sensors", b =>
                {
                    b.Property<int>("SensorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SensorId"));

                    b.Property<int>("CurrentConfigId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentFirmwareId")
                        .HasColumnType("int");

                    b.Property<string>("SensorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SensorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SensorId");

                    b.HasIndex("CurrentConfigId");

                    b.HasIndex("CurrentFirmwareId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("CourseworkApp.Database.Models.SensorConfigHistory", b =>
                {
                    b.HasOne("CourseworkApp.Database.Models.SensorConfigurations", "Config")
                        .WithMany()
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CourseworkApp.Database.Models.FirmwareConfigurations", "Firmware")
                        .WithMany()
                        .HasForeignKey("FirmwareId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Config");

                    b.Navigation("Firmware");
                });

            modelBuilder.Entity("CourseworkApp.Database.Models.SensorConfigurations", b =>
                {
                    b.OwnsOne("CourseworkApp.Database.Models.BaseSensorConfig", "ConfigData", b1 =>
                        {
                            b1.Property<int>("SensorConfigurationsConfigId")
                                .HasColumnType("int");

                            b1.Property<double>("LocationLatitude")
                                .HasColumnType("float");

                            b1.Property<double>("LocationLongitude")
                                .HasColumnType("float");

                            b1.Property<int>("MonitorDurationSeconds")
                                .HasColumnType("int");

                            b1.Property<int>("MonitorFrequencySeconds")
                                .HasColumnType("int");

                            b1.HasKey("SensorConfigurationsConfigId");

                            b1.ToTable("SensorConfigurations");

                            b1.ToJson("ConfigData");

                            b1.WithOwner()
                                .HasForeignKey("SensorConfigurationsConfigId");
                        });

                    b.Navigation("ConfigData")
                        .IsRequired();
                });

            modelBuilder.Entity("CourseworkApp.Database.Models.SensorReadings", b =>
                {
                    b.HasOne("CourseworkApp.Database.Models.SensorConfigurations", "Configuration")
                        .WithMany()
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseworkApp.Database.Models.Sensors", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("CourseworkApp.Database.Models.Sensors", b =>
                {
                    b.HasOne("CourseworkApp.Database.Models.SensorConfigurations", "CurrentConfig")
                        .WithMany()
                        .HasForeignKey("CurrentConfigId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CourseworkApp.Database.Models.FirmwareConfigurations", "CurrentFirmware")
                        .WithMany()
                        .HasForeignKey("CurrentFirmwareId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CurrentConfig");

                    b.Navigation("CurrentFirmware");
                });
#pragma warning restore 612, 618
        }
    }
}
