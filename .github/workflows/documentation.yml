name: Documentation

on:
 push:
  branches:
   - main

jobs:
 generate:
  runs-on: ubuntu-latest

  permissions:
   pages: write
   id-token: write

  steps:
   - name: Checkout code
     uses: actions/checkout@v4

   - name: Install Doxygen and Graphviz
     run: sudo apt-get update && sudo apt-get install -y doxygen graphviz

   - name: Show doxyfile
     run: cat Doxyfile || echo "Doxyfile not found"

   - name: Generate documentation
     run: doxygen .

   - name: List source files
     run: |
      echo "Listing *.cs and *.xaml files in INPUT directories:"
      find CourseworkApp/Views CourseworkApp/ViewModels CourseworkApp.Database CourseworkApp CourseworkApp.Migrations CourseworkApp.Test -type f \( -name "*.cs" -o -name "*.xaml" \)

   - name: List generated files
     run: |
      echo "Listing html directory:"
      ls -Rla html || echo "html directory not found"
      echo "Checking for class files:"
      find html -name "class_*.html" || echo "No class files found"
      echo "Listing Docs directory:"
      ls -Rla Docs || echo "Docs directory not found"
      echo "--- Listing current directory ---"
      ls -la

   - name: Ensure documentation is in the correct location
     run: |
      mkdir -p Docs/html
      cp -r html/* Docs/html/
      echo "Listing Docs/html after copy:"
            ls -Rla Docs/html
            if [ -f "Docs/html/index.html" ]; then
              echo "index.html found in Docs/html"
            else
              echo "Error: index.html not found in Docs/html"
              exit 1
            fi
            echo "Checking for class files in Docs/html:"
            find Docs/html -name "class_*.html" || echo "No class files found in Docs/html"
          else
            echo "Error: html directory not found"
            exit 1
          fi

   - name: List artifact files before upload
     run: |
      echo "Listing Docs/html before artifact upload:"
      ls -Rla Docs/html || echo "Docs/html directory not found"

   - name: Upload static files as artifact
     uses: actions/upload-pages-artifact@v3
     with:
      path: Docs/html

 deploy:
  needs: generate
  runs-on: ubuntu-latest

  permissions:
   pages: write
   id-token: write

  environment:
   name: github-pages
   url: ${{ steps.deployment.outputs.page_url }}

  steps:
   - name: Deploy to GitHub Pages
     id: deployment
     uses: actions/deploy-pages@v4

   - name: Output Page URL
     run: |
      echo "Github Pages URL: ${{ steps.deployment.outputs.page_url }}"
