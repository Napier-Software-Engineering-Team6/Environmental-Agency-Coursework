@startuml
!define Table(name) class name as "name" << (T,#ADD1B2) >>
!define Column(name, type) name : type
!define NullableColumn(name, type) name : type <<nullable>>
!define PkColumn(name, type) *name : type <<PK>>
!define FkColumn(name, type) name : type <<FK>>
!define NullableFkColumn(name, type) name : type <<FK>><<nullable>>

hide methods
hide stereo
skinparam classAttributeIconSize 0 ' Hide default icons for attributes

' Define Tables
Table(FirmwareConfigurations) {
  PkColumn(FirmwareId, int)
  --
  Column(SensorType, string)
  Column(FirmwareVersion, string)
  Column(FirmwareData, string)
  Column(ReleaseDate, DateTime)
  Column(EndofLifeDate, DateTime)
  Column(IsActive, bool)
}

Table(SensorConfigurations) {
  PkColumn(ConfigId, int)
  --
  Column(SensorType, string)
  Column(ConfigName, string)
  -- BaseSensorConfig fields (part of ConfigData) --
  Column(MonitorFrequencySeconds, int)
  Column(MonitorDurationSeconds, int)
  Column(LocationLatitude, double)
  Column(LocationLongitude, double)
  --
  Column(CreatedAt, DateTime)
  Column(IsActive, bool)
}

Table(Sensors) {
  PkColumn(SensorId, int)
  --
  FkColumn(CurrentConfigId, int)
  FkColumn(CurrentFirmwareId, int)
  Column(SensorName, string)
  Column(SensorType, string)
}

Table(SensorConfigHistory) {
  PkColumn(HistoryId, int)
  --
  FkColumn(SensorId, int)
  NullableFkColumn(ConfigId, int?)
  NullableFkColumn(FirmwareId, int)
  Column(ActionType, string)
  Column(Status, string)
  Column(Details, string)
  Column(PerformedBy, string)
  Column(Timestamp, DateTime)
}

Table(SensorReadings) {
  PkColumn(ReadingId, long)
  --
  FkColumn(SensorId, int)
  FkColumn(ConfigId, int)
  Column(Timestamp, DateTime)
  Column(Value, double)
}

' --- Sensor Relationships ---
' A Sensor MUST have one current SensorConfiguration
SensorConfigurations ||--|{ Sensors : CurrentConfig
' A Sensor MUST have one current FirmwareConfiguration
FirmwareConfigurations ||--|{ Sensors : CurrentFirmware
' A Sensor can have zero or more SensorReadings
Sensors ||--o{ SensorReadings : has readings
' A Sensor can have zero or more SensorConfigHistory entries
Sensors ||--o{ SensorConfigHistory : has history for

' --- SensorConfiguration Relationships ---
' A SensorConfiguration can be the current config for zero or more Sensors
' (Already defined via Sensors relationship)
' A SensorConfiguration can be associated with zero or more SensorReadings
SensorConfigurations ||--o{ SensorReadings : applies config
' A SensorConfiguration *may* be associated with zero or more SensorConfigHistory entries (if FirmwareId is null)
SensorConfigurations |o--o{ SensorConfigHistory : relates to config history

' --- FirmwareConfiguration Relationships ---
' A FirmwareConfiguration can be the current firmware for zero or more Sensors
' (Already defined via Sensors relationship)
' A FirmwareConfiguration *may* be associated with zero or more SensorConfigHistory entries (if ConfigId is null)
FirmwareConfigurations |o--o{ SensorConfigHistory : relates to firmware history

' --- SensorReading Relationships ---
' A SensorReading MUST belong to exactly one Sensor
' (Already defined via Sensors relationship)
' A SensorReading MUST belong to exactly one SensorConfiguration (the one active at the time of reading)
' (Already defined via SensorConfigurations relationship)

' --- SensorConfigHistory Relationships ---
' A SensorConfigHistory MUST belong to exactly one Sensor
' (Already defined via Sensors relationship)
' A SensorConfigHistory MUST relate to EITHER a SensorConfiguration OR a FirmwareConfiguration (due to CHECK constraint)
' (Relationships defined above reflect the 'may' aspect for each individually)

@enduml